# -*- coding: utf-8 -*-
"""Train00.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BqHWb75M4_Enjw8hmtJqfVu1xVSe19cE
"""

from google.colab import drive
drive.mount('/content/drive')

import tensorflow as tf

import pandas as pd
import numpy as np
import os
import keras
import itertools
import collections
import seaborn as sns
from sklearn.metrics import jaccard_similarity_score
import matplotlib.pyplot as plt
from sklearn import linear_model, preprocessing
from sklearn import tree, model_selection
from google.colab import files
from subprocess import check_call
import locale
locale.setlocale( locale.LC_ALL, 'en_US.UTF-8' )

"""Loading data from drive"""

path = './drive/My Drive/Data/anime_data/'
os.listdir(path)
df = pd.read_csv(path + 'anime.csv')

df.head()

df['genre'] = df['genre'].fillna('None')
df['genre'] = df['genre'].apply(lambda x : x.split(', '))

df.head()

genre_data = itertools.chain(*df['genre'].values.tolist())
genre_counter = collections.Counter(genre_data)
genres = pd.DataFrame.from_dict(genre_counter, orient='index').reset_index().rename(columns={'index':'genre', 0:'count'})
genres.sort_values('count', ascending=False, inplace=True)

genres.head()

genres.plot(kind='bar', x='genre', y ='count', figsize=(22,4))
plt.title('animes genres')

genre_map = {genre : x for x, genre in enumerate(genre_counter.keys())}

def extract_feature(genre):
  feature = np.zeros(len(genre_map.keys()), dtype=int)
  feature[[genre_map[x] for x in genre]] += 1
  return feature

anime_feature = df[['name', 'genre']]

anime_feature['genre'] = anime_feature['genre'].apply(lambda x:extract_feature(x))

test_data = anime_feature.take([0, 19, 1, 2, 16, 23, 6, 49, 220, 66])
for row in test_data.iterrows():
    print('Similar anime like {}:'.format(row[1]['name']))
    search = anime_feature.drop([row[0]]) # drop current anime
    search['result'] = search['genre'].apply(lambda x: jaccard_similarity_score(row[1]['genre'], x))
    search_result = search.sort_values('result', ascending=False)['name'].head(25)
    for res in search_result.values:
        print('\t{}'.format(res))
    print()