# -*- coding: utf-8 -*-
"""Pokemon combats.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v8PkLzYJfH-Xr_Rm-e5Y4-xXI77ITCkD
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import os
import matplotlib.pyplot as plt
from sklearn import linear_model, preprocessing
from sklearn import tree, model_selection
from google.colab import files
from subprocess import check_call

path = "./drive/My Drive/Data/pokemon-challenge/"
data = pd.read_csv(path + 'pokemon.csv')
combat = pd.read_csv(path + 'combats.csv')
test = pd.read_csv(path + 'tests.csv')

print(data.shape)
print(data.count())
print('**************************')
print(combat.shape)
print(combat.count())
print('**************************')
print(test.shape)
print(test.count())

fig = plt.figure(figsize=(20, 16))

plt.subplot2grid((4,1), (0, 0))
data["Type 1"].value_counts().plot(kind="bar", alpha=0.5)

plt.subplot2grid((4,1), (1, 0))
data["Type 2"].value_counts().plot(kind="bar", alpha=0.5)

plt.subplot2grid((4,1), (2, 0))
data["Generation"].value_counts().plot(kind="bar", alpha=0.5)

plt.subplot2grid((4,1), (3, 0))
data["Legendary"].value_counts().plot(kind="bar", alpha=0.5)

plt.show()

type1 = data['Type 1'].unique()
type2 = data['Type 2'].unique()

type1.sort(axis=-1, kind='quicksort', order=None)

print(type1)
print(type2)

data.head(5)

data["Leg"] = 0
data.loc[data.Legendary == True, "Leg"] = 1

data['t1'] = 0
data['t2'] = 0
combat['w'] = 0

for i in range (0, type1.size):
  data.loc[data['Type 1'] == type1[i], "t1"] = i + 1
  data.loc[data['Type 2'] == type1[i], "t2"] = i + 1

combat.loc[combat['Winner'] == combat['First_pokemon'], 'w'] = 1
targets = combat["w"].values

d = data[['t1', 't2', 'Leg', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed', 'Generation']].values
c = combat[['First_pokemon', 'Second_pokemon', 'w']].values
features_name = ['t1', 't2', 'Leg', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed', 'Generation', 'enemy_t1', 'enemy_t2', 'enemyisLeg', 'enemyAttack', 'enemyDefense', 'enemySp. Atk', 'enemySp. enemyDef', 'enemySpeed', 'enemyGeneration']
i = c[0]
features = np.concatenate((d[i[0] - 1], d[i[1] - 1]), axis=None)



for i in range(1, (int(c.size / 3))):
  arr = np.concatenate((d[c[i][0] - 1], d[c[i][1] - 1]), axis=None)
  features = np.vstack((features, arr))

"""Linear Regression model"""

classifier = linear_model.LogisticRegression(max_iter=500)
classifier_ = classifier.fit(features, targets)
print(classifier_.score(features, targets))

"""Preprocessing model"""

poly = preprocessing.PolynomialFeatures(degree=2)
poly_features = poly.fit_transform(features)

poly_classifier_ = classifier.fit(poly_features, targets)
print(poly_classifier_.score(poly_features, targets))

Decision Tree

decision_tree = tree.DecisionTreeClassifier(random_state= 1, max_depth=7)
decision_tree_ = decision_tree.fit(features, targets)
print(decision_tree_.score(features, targets))
scores = model_selection.cross_val_score(decision_tree, features, targets, scoring="accuracy", cv=50)
print(scores)
print(scores.mean())

decision_tree2 = tree.DecisionTreeClassifier(random_state= 1, min_samples_split=2)
decision_tree2_ = decision_tree2.fit(features, targets)
print(decision_tree2_.score(features, targets))
scores = model_selection.cross_val_score(decision_tree2, features, targets, scoring="accuracy", cv=50)
print(scores)
print(scores.mean())

tree.export_graphviz(decision_tree2_, feature_names=features_name, out_file="tree.dot")

check_call(['dot','-Tpng','tree.dot','-o','OutputFile.png'])
files.download('OutputFile.png')